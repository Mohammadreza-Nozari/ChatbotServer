// <auto-generated />
using AIChatbotServices.Database.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AIChatbotServices.Migrations
{
    [DbContext(typeof(ChatBotContext))]
    partial class ChatBotContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AIChatbotServices.Database.Entities.ChatBotEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChatBotEntity");
                });

            modelBuilder.Entity("AIChatbotServices.Database.Entities.Relations.UserWidgetEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ChatBotId")
                        .HasColumnType("bigint");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChatBotId");

                    b.HasIndex("UserId");

                    b.ToTable("UserWidgetEntity");
                });

            modelBuilder.Entity("AIChatbotServices.Database.Entities.TenantEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tenants");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "desc",
                            Name = "Ali"
                        });
                });

            modelBuilder.Entity("AIChatbotServices.Database.Entities.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Password = "40bd001563085fc35165329ea1ff5c5ecbdbbeef",
                            TenantId = 1L,
                            UserName = "ali"
                        });
                });

            modelBuilder.Entity("AIChatbotServices.Database.Entities.Relations.UserWidgetEntity", b =>
                {
                    b.HasOne("AIChatbotServices.Database.Entities.ChatBotEntity", "ChatBot")
                        .WithMany("UserChatBots")
                        .HasForeignKey("ChatBotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIChatbotServices.Database.Entities.UserEntity", "User")
                        .WithMany("UserChatBots")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatBot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIChatbotServices.Database.Entities.UserEntity", b =>
                {
                    b.HasOne("AIChatbotServices.Database.Entities.TenantEntity", "Tenant")
                        .WithMany("Customers")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("AIChatbotServices.Database.Entities.ChatBotEntity", b =>
                {
                    b.Navigation("UserChatBots");
                });

            modelBuilder.Entity("AIChatbotServices.Database.Entities.TenantEntity", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("AIChatbotServices.Database.Entities.UserEntity", b =>
                {
                    b.Navigation("UserChatBots");
                });
#pragma warning restore 612, 618
        }
    }
}
